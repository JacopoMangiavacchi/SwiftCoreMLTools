// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: WordTagger.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2018, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A model which takes a single input string and outputs a
/// sequence of tokens, tags for tokens, along with their
/// locations and lengths, in the original string.
struct CoreML_Specification_CoreMLModels_WordTagger {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Stores the resivion number for the model, revision 1 is available on
  /// iOS, tvOS 12.0+, macoOS 10.14+
  var revision: UInt32 {
    get {return _storage._revision}
    set {_uniqueStorage()._revision = newValue}
  }

  ///
  /// Stores the language of the model, as specified in BCP-47 format,
  /// e.g. "en-US". See https://tools.ietf.org/html/bcp47
  var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  ///
  /// Stores the name of tokens output. The output will be
  /// a sequence of strings that contains the tokens in the
  /// input string
  var tokensOutputFeatureName: String {
    get {return _storage._tokensOutputFeatureName}
    set {_uniqueStorage()._tokensOutputFeatureName = newValue}
  }

  ///
  /// Stores the name of token tags output. The output will be
  /// a sequence of strings that contains the tags for each
  /// token in the input string
  var tokenTagsOutputFeatureName: String {
    get {return _storage._tokenTagsOutputFeatureName}
    set {_uniqueStorage()._tokenTagsOutputFeatureName = newValue}
  }

  ///
  /// Stores the name of token locations output. The output will be
  /// a sequence of integers that contains the locations (indices)
  /// for each token in the input string, location starts from 0
  var tokenLocationsOutputFeatureName: String {
    get {return _storage._tokenLocationsOutputFeatureName}
    set {_uniqueStorage()._tokenLocationsOutputFeatureName = newValue}
  }

  ///
  /// Stores the name of token lengths output. The output will be
  /// a sequence of integers that contains the lengths for each
  /// token in the input string
  var tokenLengthsOutputFeatureName: String {
    get {return _storage._tokenLengthsOutputFeatureName}
    set {_uniqueStorage()._tokenLengthsOutputFeatureName = newValue}
  }

  ///
  /// Stores the byte representation of learned model parameters
  var modelParameterData: Data {
    get {return _storage._modelParameterData}
    set {_uniqueStorage()._modelParameterData = newValue}
  }

  ///
  /// Stores the set of output tags
  var tags: OneOf_Tags? {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  var stringTags: CoreML_Specification_StringVector {
    get {
      if case .stringTags(let v)? = _storage._tags {return v}
      return CoreML_Specification_StringVector()
    }
    set {_uniqueStorage()._tags = .stringTags(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///
  /// Stores the set of output tags
  enum OneOf_Tags: Equatable {
    case stringTags(CoreML_Specification_StringVector)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_CoreMLModels_WordTagger.OneOf_Tags, rhs: CoreML_Specification_CoreMLModels_WordTagger.OneOf_Tags) -> Bool {
      switch (lhs, rhs) {
      case (.stringTags(let l), .stringTags(let r)): return l == r
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification.CoreMLModels"

extension CoreML_Specification_CoreMLModels_WordTagger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WordTagger"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "revision"),
    10: .same(proto: "language"),
    20: .same(proto: "tokensOutputFeatureName"),
    21: .same(proto: "tokenTagsOutputFeatureName"),
    22: .same(proto: "tokenLocationsOutputFeatureName"),
    23: .same(proto: "tokenLengthsOutputFeatureName"),
    100: .same(proto: "modelParameterData"),
    200: .same(proto: "stringTags"),
  ]

  fileprivate class _StorageClass {
    var _revision: UInt32 = 0
    var _language: String = String()
    var _tokensOutputFeatureName: String = String()
    var _tokenTagsOutputFeatureName: String = String()
    var _tokenLocationsOutputFeatureName: String = String()
    var _tokenLengthsOutputFeatureName: String = String()
    var _modelParameterData: Data = SwiftProtobuf.Internal.emptyData
    var _tags: CoreML_Specification_CoreMLModels_WordTagger.OneOf_Tags?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _revision = source._revision
      _language = source._language
      _tokensOutputFeatureName = source._tokensOutputFeatureName
      _tokenTagsOutputFeatureName = source._tokenTagsOutputFeatureName
      _tokenLocationsOutputFeatureName = source._tokenLocationsOutputFeatureName
      _tokenLengthsOutputFeatureName = source._tokenLengthsOutputFeatureName
      _modelParameterData = source._modelParameterData
      _tags = source._tags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._revision)
        case 10: try decoder.decodeSingularStringField(value: &_storage._language)
        case 20: try decoder.decodeSingularStringField(value: &_storage._tokensOutputFeatureName)
        case 21: try decoder.decodeSingularStringField(value: &_storage._tokenTagsOutputFeatureName)
        case 22: try decoder.decodeSingularStringField(value: &_storage._tokenLocationsOutputFeatureName)
        case 23: try decoder.decodeSingularStringField(value: &_storage._tokenLengthsOutputFeatureName)
        case 100: try decoder.decodeSingularBytesField(value: &_storage._modelParameterData)
        case 200:
          var v: CoreML_Specification_StringVector?
          if let current = _storage._tags {
            try decoder.handleConflictingOneOf()
            if case .stringTags(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._tags = .stringTags(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._revision != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._revision, fieldNumber: 1)
      }
      if !_storage._language.isEmpty {
        try visitor.visitSingularStringField(value: _storage._language, fieldNumber: 10)
      }
      if !_storage._tokensOutputFeatureName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokensOutputFeatureName, fieldNumber: 20)
      }
      if !_storage._tokenTagsOutputFeatureName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokenTagsOutputFeatureName, fieldNumber: 21)
      }
      if !_storage._tokenLocationsOutputFeatureName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokenLocationsOutputFeatureName, fieldNumber: 22)
      }
      if !_storage._tokenLengthsOutputFeatureName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokenLengthsOutputFeatureName, fieldNumber: 23)
      }
      if !_storage._modelParameterData.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._modelParameterData, fieldNumber: 100)
      }
      if case .stringTags(let v)? = _storage._tags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_CoreMLModels_WordTagger, rhs: CoreML_Specification_CoreMLModels_WordTagger) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._revision != rhs_storage._revision {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._tokensOutputFeatureName != rhs_storage._tokensOutputFeatureName {return false}
        if _storage._tokenTagsOutputFeatureName != rhs_storage._tokenTagsOutputFeatureName {return false}
        if _storage._tokenLocationsOutputFeatureName != rhs_storage._tokenLocationsOutputFeatureName {return false}
        if _storage._tokenLengthsOutputFeatureName != rhs_storage._tokenLengthsOutputFeatureName {return false}
        if _storage._modelParameterData != rhs_storage._modelParameterData {return false}
        if _storage._tags != rhs_storage._tags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
