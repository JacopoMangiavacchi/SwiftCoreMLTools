// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CustomModel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2017, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A parameterized model whose function is defined in code
struct CoreML_Specification_CustomModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the class (conforming to MLCustomModel) corresponding to this model
  var className: String = String()

  var parameters: Dictionary<String,CoreML_Specification_CustomModel.CustomModelParamValue> = [:]

  /// An (optional) description provided by the model creator. This information is displayed when viewing the model, but does not affect the model's execution on device.
  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct CustomModelParamValue {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var value: CoreML_Specification_CustomModel.CustomModelParamValue.OneOf_Value? = nil

    var doubleValue: Double {
      get {
        if case .doubleValue(let v)? = value {return v}
        return 0
      }
      set {value = .doubleValue(newValue)}
    }

    var stringValue: String {
      get {
        if case .stringValue(let v)? = value {return v}
        return String()
      }
      set {value = .stringValue(newValue)}
    }

    var intValue: Int32 {
      get {
        if case .intValue(let v)? = value {return v}
        return 0
      }
      set {value = .intValue(newValue)}
    }

    var longValue: Int64 {
      get {
        if case .longValue(let v)? = value {return v}
        return 0
      }
      set {value = .longValue(newValue)}
    }

    var boolValue: Bool {
      get {
        if case .boolValue(let v)? = value {return v}
        return false
      }
      set {value = .boolValue(newValue)}
    }

    var bytesValue: Data {
      get {
        if case .bytesValue(let v)? = value {return v}
        return SwiftProtobuf.Internal.emptyData
      }
      set {value = .bytesValue(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Value: Equatable {
      case doubleValue(Double)
      case stringValue(String)
      case intValue(Int32)
      case longValue(Int64)
      case boolValue(Bool)
      case bytesValue(Data)

    #if !swift(>=4.1)
      static func ==(lhs: CoreML_Specification_CustomModel.CustomModelParamValue.OneOf_Value, rhs: CoreML_Specification_CustomModel.CustomModelParamValue.OneOf_Value) -> Bool {
        switch (lhs, rhs) {
        case (.doubleValue(let l), .doubleValue(let r)): return l == r
        case (.stringValue(let l), .stringValue(let r)): return l == r
        case (.intValue(let l), .intValue(let r)): return l == r
        case (.longValue(let l), .longValue(let r)): return l == r
        case (.boolValue(let l), .boolValue(let r)): return l == r
        case (.bytesValue(let l), .bytesValue(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification"

extension CoreML_Specification_CustomModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CustomModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "className"),
    30: .same(proto: "parameters"),
    40: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 10: try decoder.decodeSingularStringField(value: &self.className)
      case 30: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreML_Specification_CustomModel.CustomModelParamValue>.self, value: &self.parameters)
      case 40: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.className.isEmpty {
      try visitor.visitSingularStringField(value: self.className, fieldNumber: 10)
    }
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreML_Specification_CustomModel.CustomModelParamValue>.self, value: self.parameters, fieldNumber: 30)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 40)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_CustomModel, rhs: CoreML_Specification_CustomModel) -> Bool {
    if lhs.className != rhs.className {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_CustomModel.CustomModelParamValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CoreML_Specification_CustomModel.protoMessageName + ".CustomModelParamValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "doubleValue"),
    20: .same(proto: "stringValue"),
    30: .same(proto: "intValue"),
    40: .same(proto: "longValue"),
    50: .same(proto: "boolValue"),
    60: .same(proto: "bytesValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 10:
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.value = .doubleValue(v)}
      case 20:
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.value = .stringValue(v)}
      case 30:
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.value = .intValue(v)}
      case 40:
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.value = .longValue(v)}
      case 50:
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.value = .boolValue(v)}
      case 60:
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.value = .bytesValue(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.value {
    case .doubleValue(let v)?:
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
    case .stringValue(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 20)
    case .intValue(let v)?:
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 30)
    case .longValue(let v)?:
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 40)
    case .boolValue(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 50)
    case .bytesValue(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 60)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_CustomModel.CustomModelParamValue, rhs: CoreML_Specification_CustomModel.CustomModelParamValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
