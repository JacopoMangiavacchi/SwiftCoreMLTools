// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Gazetteer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2019, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A model which uses an efficient probabilistic representation
/// for assigning labels to a set of strings.
struct CoreML_Specification_CoreMLModels_Gazetteer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Stores the revision number for the model, revision 2 is available on
  /// iOS, tvOS 13.0+, macOS 10.15+
  var revision: UInt32 {
    get {return _storage._revision}
    set {_uniqueStorage()._revision = newValue}
  }

  ///
  /// Stores the language of the model, as specified in BCP-47 format,
  /// e.g. "en-US". See https://tools.ietf.org/html/bcp47
  var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  ///
  /// Natural Lanaguge framework's efficient representation of a gazetter.
  var modelParameterData: Data {
    get {return _storage._modelParameterData}
    set {_uniqueStorage()._modelParameterData = newValue}
  }

  ///
  /// Stores the set of output class labels
  var classLabels: OneOf_ClassLabels? {
    get {return _storage._classLabels}
    set {_uniqueStorage()._classLabels = newValue}
  }

  var stringClassLabels: CoreML_Specification_StringVector {
    get {
      if case .stringClassLabels(let v)? = _storage._classLabels {return v}
      return CoreML_Specification_StringVector()
    }
    set {_uniqueStorage()._classLabels = .stringClassLabels(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///
  /// Stores the set of output class labels
  enum OneOf_ClassLabels: Equatable {
    case stringClassLabels(CoreML_Specification_StringVector)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_CoreMLModels_Gazetteer.OneOf_ClassLabels, rhs: CoreML_Specification_CoreMLModels_Gazetteer.OneOf_ClassLabels) -> Bool {
      switch (lhs, rhs) {
      case (.stringClassLabels(let l), .stringClassLabels(let r)): return l == r
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification.CoreMLModels"

extension CoreML_Specification_CoreMLModels_Gazetteer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Gazetteer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "revision"),
    10: .same(proto: "language"),
    100: .same(proto: "modelParameterData"),
    200: .same(proto: "stringClassLabels"),
  ]

  fileprivate class _StorageClass {
    var _revision: UInt32 = 0
    var _language: String = String()
    var _modelParameterData: Data = SwiftProtobuf.Internal.emptyData
    var _classLabels: CoreML_Specification_CoreMLModels_Gazetteer.OneOf_ClassLabels?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _revision = source._revision
      _language = source._language
      _modelParameterData = source._modelParameterData
      _classLabels = source._classLabels
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._revision)
        case 10: try decoder.decodeSingularStringField(value: &_storage._language)
        case 100: try decoder.decodeSingularBytesField(value: &_storage._modelParameterData)
        case 200:
          var v: CoreML_Specification_StringVector?
          if let current = _storage._classLabels {
            try decoder.handleConflictingOneOf()
            if case .stringClassLabels(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._classLabels = .stringClassLabels(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._revision != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._revision, fieldNumber: 1)
      }
      if !_storage._language.isEmpty {
        try visitor.visitSingularStringField(value: _storage._language, fieldNumber: 10)
      }
      if !_storage._modelParameterData.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._modelParameterData, fieldNumber: 100)
      }
      if case .stringClassLabels(let v)? = _storage._classLabels {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_CoreMLModels_Gazetteer, rhs: CoreML_Specification_CoreMLModels_Gazetteer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._revision != rhs_storage._revision {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._modelParameterData != rhs_storage._modelParameterData {return false}
        if _storage._classLabels != rhs_storage._classLabels {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
