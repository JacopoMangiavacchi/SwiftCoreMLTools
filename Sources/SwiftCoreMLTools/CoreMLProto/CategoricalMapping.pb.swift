// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CategoricalMapping.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2017, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A categorical mapping.
///
/// This allows conversion from integers to strings, or from strings to integers.
struct CoreML_Specification_CategoricalMapping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mappingType: OneOf_MappingType? {
    get {return _storage._mappingType}
    set {_uniqueStorage()._mappingType = newValue}
  }

  /// Conversion from strings to integers
  var stringToInt64Map: CoreML_Specification_StringToInt64Map {
    get {
      if case .stringToInt64Map(let v)? = _storage._mappingType {return v}
      return CoreML_Specification_StringToInt64Map()
    }
    set {_uniqueStorage()._mappingType = .stringToInt64Map(newValue)}
  }

  /// Conversion from integer to string
  var int64ToStringMap: CoreML_Specification_Int64ToStringMap {
    get {
      if case .int64ToStringMap(let v)? = _storage._mappingType {return v}
      return CoreML_Specification_Int64ToStringMap()
    }
    set {_uniqueStorage()._mappingType = .int64ToStringMap(newValue)}
  }

  ///*
  /// The value returned if an input is not contained in the map above.
  /// If one of these is not set, then an error is raised on an unknown input.
  var valueOnUnknown: OneOf_ValueOnUnknown? {
    get {return _storage._valueOnUnknown}
    set {_uniqueStorage()._valueOnUnknown = newValue}
  }

  /// Default output when converting from an integer to a string.
  var strValue: String {
    get {
      if case .strValue(let v)? = _storage._valueOnUnknown {return v}
      return String()
    }
    set {_uniqueStorage()._valueOnUnknown = .strValue(newValue)}
  }

  /// Default output when converting from a string to an integer.
  var int64Value: Int64 {
    get {
      if case .int64Value(let v)? = _storage._valueOnUnknown {return v}
      return 0
    }
    set {_uniqueStorage()._valueOnUnknown = .int64Value(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_MappingType: Equatable {
    /// Conversion from strings to integers
    case stringToInt64Map(CoreML_Specification_StringToInt64Map)
    /// Conversion from integer to string
    case int64ToStringMap(CoreML_Specification_Int64ToStringMap)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_CategoricalMapping.OneOf_MappingType, rhs: CoreML_Specification_CategoricalMapping.OneOf_MappingType) -> Bool {
      switch (lhs, rhs) {
      case (.stringToInt64Map(let l), .stringToInt64Map(let r)): return l == r
      case (.int64ToStringMap(let l), .int64ToStringMap(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  ///*
  /// The value returned if an input is not contained in the map above.
  /// If one of these is not set, then an error is raised on an unknown input.
  enum OneOf_ValueOnUnknown: Equatable {
    /// Default output when converting from an integer to a string.
    case strValue(String)
    /// Default output when converting from a string to an integer.
    case int64Value(Int64)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_CategoricalMapping.OneOf_ValueOnUnknown, rhs: CoreML_Specification_CategoricalMapping.OneOf_ValueOnUnknown) -> Bool {
      switch (lhs, rhs) {
      case (.strValue(let l), .strValue(let r)): return l == r
      case (.int64Value(let l), .int64Value(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification"

extension CoreML_Specification_CategoricalMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CategoricalMapping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stringToInt64Map"),
    2: .same(proto: "int64ToStringMap"),
    101: .same(proto: "strValue"),
    102: .same(proto: "int64Value"),
  ]

  fileprivate class _StorageClass {
    var _mappingType: CoreML_Specification_CategoricalMapping.OneOf_MappingType?
    var _valueOnUnknown: CoreML_Specification_CategoricalMapping.OneOf_ValueOnUnknown?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mappingType = source._mappingType
      _valueOnUnknown = source._valueOnUnknown
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: CoreML_Specification_StringToInt64Map?
          if let current = _storage._mappingType {
            try decoder.handleConflictingOneOf()
            if case .stringToInt64Map(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._mappingType = .stringToInt64Map(v)}
        case 2:
          var v: CoreML_Specification_Int64ToStringMap?
          if let current = _storage._mappingType {
            try decoder.handleConflictingOneOf()
            if case .int64ToStringMap(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._mappingType = .int64ToStringMap(v)}
        case 101:
          if _storage._valueOnUnknown != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._valueOnUnknown = .strValue(v)}
        case 102:
          if _storage._valueOnUnknown != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {_storage._valueOnUnknown = .int64Value(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._mappingType {
      case .stringToInt64Map(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .int64ToStringMap(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
      switch _storage._valueOnUnknown {
      case .strValue(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 101)
      case .int64Value(let v)?:
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 102)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_CategoricalMapping, rhs: CoreML_Specification_CategoricalMapping) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mappingType != rhs_storage._mappingType {return false}
        if _storage._valueOnUnknown != rhs_storage._valueOnUnknown {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
