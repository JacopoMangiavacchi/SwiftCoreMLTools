// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Parameters.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2017, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Int64 parameter,
/// consisting of a default int64 value, and allowed range or set of values
/// value is unbounded if AllowedValues is not set.
struct CoreML_Specification_Int64Parameter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var defaultValue: Int64 {
    get {return _storage._defaultValue}
    set {_uniqueStorage()._defaultValue = newValue}
  }

  var allowedValues: OneOf_AllowedValues? {
    get {return _storage._allowedValues}
    set {_uniqueStorage()._allowedValues = newValue}
  }

  var range: CoreML_Specification_Int64Range {
    get {
      if case .range(let v)? = _storage._allowedValues {return v}
      return CoreML_Specification_Int64Range()
    }
    set {_uniqueStorage()._allowedValues = .range(newValue)}
  }

  var set: CoreML_Specification_Int64Set {
    get {
      if case .set(let v)? = _storage._allowedValues {return v}
      return CoreML_Specification_Int64Set()
    }
    set {_uniqueStorage()._allowedValues = .set(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_AllowedValues: Equatable {
    case range(CoreML_Specification_Int64Range)
    case set(CoreML_Specification_Int64Set)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_Int64Parameter.OneOf_AllowedValues, rhs: CoreML_Specification_Int64Parameter.OneOf_AllowedValues) -> Bool {
      switch (lhs, rhs) {
      case (.range(let l), .range(let r)): return l == r
      case (.set(let l), .set(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///*
/// Double parameter,
/// consisting of a default double value, and allowed range of values
/// value is unbounded if AllowedValues is not set.
struct CoreML_Specification_DoubleParameter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var defaultValue: Double {
    get {return _storage._defaultValue}
    set {_uniqueStorage()._defaultValue = newValue}
  }

  var allowedValues: OneOf_AllowedValues? {
    get {return _storage._allowedValues}
    set {_uniqueStorage()._allowedValues = newValue}
  }

  var range: CoreML_Specification_DoubleRange {
    get {
      if case .range(let v)? = _storage._allowedValues {return v}
      return CoreML_Specification_DoubleRange()
    }
    set {_uniqueStorage()._allowedValues = .range(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_AllowedValues: Equatable {
    case range(CoreML_Specification_DoubleRange)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_DoubleParameter.OneOf_AllowedValues, rhs: CoreML_Specification_DoubleParameter.OneOf_AllowedValues) -> Bool {
      switch (lhs, rhs) {
      case (.range(let l), .range(let r)): return l == r
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///*
/// String parameter,
/// A default string value must be provided
struct CoreML_Specification_StringParameter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var defaultValue: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// String parameter,
/// A default bool value must be provided
struct CoreML_Specification_BoolParameter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var defaultValue: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification"

extension CoreML_Specification_Int64Parameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Int64Parameter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "defaultValue"),
    10: .same(proto: "range"),
    11: .same(proto: "set"),
  ]

  fileprivate class _StorageClass {
    var _defaultValue: Int64 = 0
    var _allowedValues: CoreML_Specification_Int64Parameter.OneOf_AllowedValues?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _defaultValue = source._defaultValue
      _allowedValues = source._allowedValues
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._defaultValue)
        case 10:
          var v: CoreML_Specification_Int64Range?
          if let current = _storage._allowedValues {
            try decoder.handleConflictingOneOf()
            if case .range(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._allowedValues = .range(v)}
        case 11:
          var v: CoreML_Specification_Int64Set?
          if let current = _storage._allowedValues {
            try decoder.handleConflictingOneOf()
            if case .set(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._allowedValues = .set(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._defaultValue != 0 {
        try visitor.visitSingularInt64Field(value: _storage._defaultValue, fieldNumber: 1)
      }
      switch _storage._allowedValues {
      case .range(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .set(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_Int64Parameter, rhs: CoreML_Specification_Int64Parameter) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._defaultValue != rhs_storage._defaultValue {return false}
        if _storage._allowedValues != rhs_storage._allowedValues {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_DoubleParameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoubleParameter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "defaultValue"),
    10: .same(proto: "range"),
  ]

  fileprivate class _StorageClass {
    var _defaultValue: Double = 0
    var _allowedValues: CoreML_Specification_DoubleParameter.OneOf_AllowedValues?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _defaultValue = source._defaultValue
      _allowedValues = source._allowedValues
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularDoubleField(value: &_storage._defaultValue)
        case 10:
          var v: CoreML_Specification_DoubleRange?
          if let current = _storage._allowedValues {
            try decoder.handleConflictingOneOf()
            if case .range(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._allowedValues = .range(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._defaultValue != 0 {
        try visitor.visitSingularDoubleField(value: _storage._defaultValue, fieldNumber: 1)
      }
      if case .range(let v)? = _storage._allowedValues {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_DoubleParameter, rhs: CoreML_Specification_DoubleParameter) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._defaultValue != rhs_storage._defaultValue {return false}
        if _storage._allowedValues != rhs_storage._allowedValues {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_StringParameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StringParameter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "defaultValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.defaultValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.defaultValue.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_StringParameter, rhs: CoreML_Specification_StringParameter) -> Bool {
    if lhs.defaultValue != rhs.defaultValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_BoolParameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BoolParameter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "defaultValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.defaultValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.defaultValue != false {
      try visitor.visitSingularBoolField(value: self.defaultValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_BoolParameter, rhs: CoreML_Specification_BoolParameter) -> Bool {
    if lhs.defaultValue != rhs.defaultValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
